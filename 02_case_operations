include: "/views/joint_model/cases.view"

view: cases_operations {
  extends: [cases]

# -----------------------------
# SAMPLES — LOGIC BEGINNING
# -----------------------------

  dimension: sample_type_flag {
    type: number
    sql: CASE WHEN ${samples.sample_type} IS NOT NULL THEN 1 ELSE 0 END ;;
  }

  dimension: preferred_sample_flag {
    type: number
    sql: CASE WHEN ${tests.preferred_sample} IS NOT NULL THEN 1 ELSE 0 END ;;
  }

  dimension_group: deadline_given_to_ip_if_missed {
    type: time
    timeframes: [raw, date, week, month, year]
    sql: ${TABLE}.deadline_given_to_ip_if_missed ;;
  }

  measure: samples_collected_all_time_weighted_v4 {
    label: "Samples Collected (All Time – Weighted V4)"
    type: number
    value_format_name: decimal_0

    sql:
    SUM(
      -- MiM dataset
      CASE
        WHEN ${samples.sample_type} IS NOT NULL THEN
          CASE ${samples.sample_type}
            WHEN 'blood' THEN 2
            WHEN 'head_hair' THEN 2
            WHEN 'body_hair' THEN 2
            WHEN 'mouth_swab' THEN 1
            WHEN 'nail' THEN 1
            WHEN 'urine' THEN 1
            WHEN 'saliva' THEN 1
            WHEN 'scram_bracelet' THEN 1
            WHEN 'instant_urine' THEN 1
            WHEN 'instant_oral_fluid' THEN 1
            WHEN 'instant_breath' THEN 1
            ELSE 0
          END
        ELSE 0
      END
      +
      -- Sugar: preferred_sample
      CASE
        WHEN ${tests.preferred_sample} IS NOT NULL THEN
          CASE LOWER(${tests.preferred_sample})
            WHEN 'blood' THEN 2
            WHEN 'head hair' THEN 2
            WHEN 'head_hair' THEN 2
            WHEN 'body_hair' THEN 2
            WHEN 'body hair' THEN 2
            WHEN 'fingernail' THEN 1
            WHEN 'toenail' THEN 1
            WHEN 'nail' THEN 1
            WHEN 'mouth_swab' THEN 1
            WHEN 'saliva' THEN 1
            WHEN 'urine' THEN 1
            WHEN 'scram_bracelet' THEN 1
            WHEN 'instant_urine' THEN 1
            WHEN 'instant_oral_fluid' THEN 1
            WHEN 'instant_breath' THEN 1
            ELSE 0
          END
        ELSE 0
      END
      +
      -- Sugar: test_required
      CASE
        WHEN ${tests.test_required} IS NOT NULL THEN
            IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
            IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
            IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
            IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
            IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
            IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0) +
            IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'scram'), 1, 0) +
            IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'breath'), 1, 0)
        ELSE 0
      END
    ) ;;
  }

  measure: samples_collected_last_year_weighted {
    label: "Samples Collected (Last Year – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN EXTRACT(YEAR FROM ${appointments.appointment_held_raw}) = EXTRACT(YEAR FROM CURRENT_DATE()) - 1
            THEN
              -- MiM sample_type
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                -- Sugar: preferred_sample
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                -- Sugar: test_required
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }

  measure: samples_collected_this_year_weighted {
    label: "Samples Collected (This Year – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN EXTRACT(YEAR FROM ${appointments.appointment_held_raw}) = EXTRACT(YEAR FROM CURRENT_DATE())
            THEN
              -- MiM sample_type logic
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END

      -- Sugar: preferred_sample logic
      WHEN ${tests.preferred_sample} IS NOT NULL THEN
      CASE LOWER(${tests.preferred_sample})
      WHEN 'blood' THEN 2
      WHEN 'body_hair' THEN 2
      WHEN 'head hair' THEN 2
      WHEN 'head_hair' THEN 2
      WHEN 'veni_blood_sample' THEN 2
      ELSE 1
      END

      -- Sugar: test_required logic
      WHEN ${tests.test_required} IS NOT NULL THEN
      (
      IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 1, 0) +
      IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 1, 0) +
      IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
      IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 1, 0) +
      IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
      IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 1, 0)
      )
      ELSE 0
      END
      ELSE 0
      END
      ) ;;
  }

  measure: samples_collected_4_weeks_ago_weighted {
    label: "Samples Collected (4 Weeks Ago – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN DATE_TRUNC(DATE(${appointments.appointment_held_raw}), WEEK(MONDAY))
                 = DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK(MONDAY)), INTERVAL 4 WEEK)
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }
  measure: samples_collected_3_weeks_ago_weighted {
    label: "Samples Collected (3 Weeks Ago – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN DATE_TRUNC(DATE(${appointments.appointment_held_raw}), WEEK(MONDAY))
                 = DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK(MONDAY)), INTERVAL 3 WEEK)
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }
  measure: samples_collected_2_weeks_ago_weighted {
    label: "Samples Collected (2 Weeks Ago – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN DATE_TRUNC(DATE(${appointments.appointment_held_raw}), WEEK(MONDAY))
                 = DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK(MONDAY)), INTERVAL 2 WEEK)
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }
  measure: samples_collected_last_week_weighted {
    label: "Samples Collected (Last Week – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN DATE_TRUNC(DATE(${appointments.appointment_held_raw}), WEEK(MONDAY))
                 = DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK(MONDAY)), INTERVAL 1 WEEK)
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }

  measure: samples_collected_rolling_30_days_weighted {
    label: "Samples Collected (Rolling 30 Days – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN DATE(${appointments.appointment_held_raw}) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 1, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 1, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 0, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }

  measure: samples_collected_this_week_weighted {
    label: "Samples Collected (This Week – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN EXTRACT(ISOWEEK FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(ISOWEEK FROM CURRENT_DATE())
              AND EXTRACT(YEAR FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(YEAR FROM CURRENT_DATE())
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }
  measure: samples_collected_3_months_ago_weighted {
    label: "Samples Collected (3 Months Ago – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN EXTRACT(YEAR FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
              AND EXTRACT(MONTH FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(MONTH FROM DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH))
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }

  measure: samples_collected_2_months_ago_weighted {
    label: "Samples Collected (2 Months Ago – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN EXTRACT(YEAR FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 MONTH))
              AND EXTRACT(MONTH FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(MONTH FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 MONTH))
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }

  measure: samples_collected_last_month_weighted {
    label: "Samples Collected (Last Month – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN EXTRACT(YEAR FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH))
              AND EXTRACT(MONTH FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(MONTH FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH))
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }

  measure: samples_collected_this_month_weighted {
    label: "Samples Collected (This Month – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN EXTRACT(YEAR FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(YEAR FROM CURRENT_DATE())
              AND EXTRACT(MONTH FROM DATE(${appointments.appointment_held_raw})) = EXTRACT(MONTH FROM CURRENT_DATE())
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }

  measure: samples_scheduled_next_week_weighted {
    label: "Samples Scheduled (Next Week – Weighted)"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN DATE(${appointments.appointment_held_raw}) >= DATE_ADD(CURRENT_DATE(), INTERVAL 1 WEEK)
              AND DATE(${appointments.appointment_held_raw}) < DATE_ADD(CURRENT_DATE(), INTERVAL 2 WEEK)
            THEN
              CASE
                WHEN ${samples.sample_type} IS NOT NULL THEN
                  CASE ${samples.sample_type}
                    WHEN 'blood' THEN 2
                    WHEN 'mouth_swab' THEN 1
                    WHEN 'head_hair' THEN 2
                    WHEN 'body_hair' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.preferred_sample} IS NOT NULL THEN
                  CASE LOWER(${tests.preferred_sample})
                    WHEN 'blood' THEN 2
                    WHEN 'body_hair' THEN 2
                    WHEN 'head hair' THEN 2
                    WHEN 'head_hair' THEN 2
                    WHEN 'veni_blood_sample' THEN 2
                    ELSE 1
                  END
                WHEN ${tests.test_required} IS NOT NULL THEN
                  (
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                    IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 2, 0)
                  )
                ELSE 0
              END
            ELSE 0
          END
        ) ;;
  }

  dimension_group: appointment_month {
    label: "Appointment Held Month"
    type: time
    timeframes: [month]
    datatype: date
    convert_tz: no
    sql: DATE_TRUNC(DATETIME(${appointments.appointment_held_raw}, "Europe/London"), MONTH) ;;
  }




  measure: samples_collected_weighted {
    label: "Samples Collected – Weighted"
    type: number
    value_format_name: decimal_0

    sql: SUM(
          CASE
            WHEN ${samples.sample_type} IS NOT NULL THEN
              CASE ${samples.sample_type}
                WHEN 'blood' THEN 2
                WHEN 'head_hair' THEN 2
                WHEN 'body_hair' THEN 2
                WHEN 'mouth_swab' THEN 1
                WHEN 'nail' THEN 1
                WHEN 'urine' THEN 1
                WHEN 'saliva' THEN 1
                WHEN 'scram_bracelet' THEN 1
                WHEN 'instant_urine' THEN 1
                WHEN 'instant_oral_fluid' THEN 1
                WHEN 'instant_breath' THEN 1
                ELSE 0
              END
            WHEN ${tests.preferred_sample} IS NOT NULL THEN
              CASE LOWER(${tests.preferred_sample})
                WHEN 'blood' THEN 2
                WHEN 'head hair' THEN 2
                WHEN 'head_hair' THEN 2
                WHEN 'body_hair' THEN 2
                WHEN 'body hair' THEN 2
                WHEN 'fingernail' THEN 1
                WHEN 'toenail' THEN 1
                WHEN 'nail' THEN 1
                WHEN 'mouth_swab' THEN 1
                WHEN 'saliva' THEN 1
                WHEN 'urine' THEN 1
                WHEN 'scram_bracelet' THEN 1
                WHEN 'instant_urine' THEN 1
                WHEN 'instant_oral_fluid' THEN 1
                WHEN 'instant_breath' THEN 1
                ELSE 0
              END
            WHEN ${tests.test_required} IS NOT NULL THEN
              (
                IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'peth'), 1, 0) +
                IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'fbc'), 2, 0) +
                IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'cdt'), 1, 0) +
                IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'lft'), 2, 0) +
                IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'etg'), 2, 0) +
                IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'faee'), 0, 0) +
                IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'scram'), 1, 0) +
                IF(REGEXP_CONTAINS(LOWER(${tests.test_required}), r'breath'), 1, 0)
              )
            ELSE 0
          END
        ) ;;
  }


  dimension: appointment_held_month_number {
    label: "Appointment Held Month Number (Sort Key)"
    type: number
    sql: EXTRACT(MONTH FROM DATETIME(${appointments.appointment_held_raw}, "Europe/London")) ;;
    hidden: no
  }


  dimension: appointment_held_year_month_sort_key {
    label: "Appointment Held Year-Month (Sort Key)"
    type: number
    sql: EXTRACT(YEAR FROM DATETIME(${appointments.appointment_held_raw}, "Europe/London")) * 100 +
      EXTRACT(MONTH FROM DATETIME(${appointments.appointment_held_raw}, "Europe/London")) ;;
    hidden: no
  }


  dimension: appointment_held_month_full_name {
    label: "Appointment Held Month (Full Name)"
    type: string
    sql: FORMAT_DATE('%B', DATETIME(${appointments.appointment_held_raw}, "Europe/London")) ;;
  }

  dimension: appointment_held_month_label_25 {
    label: "Appointment Held Month (Full)"
    type: string
    sql: FORMAT_DATE('%B %Y', DATETIME(${appointments.appointment_held_raw}, "Europe/London")) ;;
  }



# -----------------------------
# SAMPLES — LOGIC ENDED
# -----------------------------

  measure: count_distinct_cases {
    group_label: "Data - Case Worker"
    label: "Total Cases Managed"
    type:  count_distinct
    sql: ${cases_operations.id} ;;
  }

  measure: total_cases_associated_with_case_worker {

    label: "Total Cases Associated with Case Worker"
    type:  count_distinct
    sql: ${id} ;;
    group_label: "Data - Case Worker"
  }

  dimension: case_worker_ids_by_source {
    group_label: "Data - Case Worker"
    label: "Case Worker IDs by Source"
    type: string
    sql: CONCAT('MiM ID: ',
              IF(${case_worker_user.source} = 'mim', ${case_worker_user.id}, 'N/A'),
              ' | Sugar ID: ',
              IF(${case_worker_user.source} = 'sugar_crm', ${case_worker_user.id}, 'N/A')) ;;
  }

  dimension: updated_or_created {
    hidden: yes
    type: yesno
    sql:
    (
      DATE(${updated_at}) >= DATE_TRUNC(CURRENT_DATE(), MONTH)
      OR DATE(${start_date}) >= DATE_TRUNC(CURRENT_DATE(), MONTH)
    ) ;;
    description: "TRUE if the case was either updated or created during the current month."
  }
  
  measure: total_cases_managed_this_month_touched_any {
    label: "Cases Managed (Touched or Created – This Month)"
    group_label: "Data – Case Worker"
    type: count_distinct
    sql: ${id} ;;
    filters: [updated_or_created: "yes"]
    value_format_name: decimal_0
    description: "Counts all unique cases that were updated or newly created during the current month — representing every case actively managed."
  }
  
  
  
  
  dimension: mim_case_worker_id {
    group_label: "Data - Case Worker"
    label: "Case Worker ID (MiM)"
    type: string
    sql: CASE WHEN ${case_worker_user.source} = 'mim' THEN ${case_worker_user.id} ELSE NULL END ;;
  }

  dimension: sugar_case_worker_id {
    group_label: "Data - Case Worker"
    label: "Case Worker ID (Sugar)"
    type: string
    sql: CASE WHEN ${case_worker_user.source} = 'sugar_crm' THEN ${case_worker_user.id} ELSE NULL END ;;
  }

  dimension: case_worker_full_name {
    group_label: "Data - Case Worker"
    label: "Case Worker Full Name"
    type: string
    sql: ${case_worker_id_map.full_name} ;;
  }

  measure: total_cases_managed_this_month {
    group_label: "Data - Case Worker"
    label: "Total Cases Managed This Month"
    type: count_distinct
    sql: ${id} ;;
    filters: [start_date: "this month"]
  }

  measure: total_cases_managed_last_month {
    group_label: "Data - Case Worker"
    label: "Total Cases Managed Last Month"
    type: count_distinct
    sql: ${id} ;;
    filters: [start_date: "last month"]
  }


  measure: total_cases_current_year {
    group_label: "Measures - Case Status"
    label: "Cases Managed – Current Year"
    type: count_distinct
    sql: ${id} ;;
    filters: [start_date: "this year"]
  }

  measure: total_cases_current_month {
    group_label: "Measures - Case Status"
    label: "Cases Managed – Current Month"
    type: count_distinct
    sql: ${id} ;;
    filters: [start_date: "this month"]
  }

  measure: cases_started_current_year {
    label: "Cases Started – Current Year"
    type: count
    value_format_name: decimal_0
    description: "Counts all cases with a start date in the current calendar year (excludes Training/Duplicate)."
    filters: [start_date: "this year"]
    group_label: "Data – Measures / Cases – Counts & Percents"
  }


  measure: cases_started_last_year {
    label: "Cases Started – Last Year"
    type: count
    value_format_name: decimal_0
    description: "Counts all cases with a start date in the previous calendar year (excludes Training/Duplicate)."
    filters: [start_date: "last year"]
    group_label: "Data – Measures / Cases – Counts & Percents"
  }

  measure: cases_started_current_month {
    label: "Cases Started – Current Year"
    type: count
    value_format_name: decimal_0
    description: "Counts all cases with a start date in the current month (excludes Training/Duplicate)."
    filters: [start_date: "this month"]
    group_label: "Data – Measures / Cases – Counts & Percents"
  }

# --- Lifecycle helpers (reuses the normalized fields from cases) ---

  dimension: status_group {
    type: string
    sql:
      CASE
        WHEN ${status_stage_order} IS NOT NULL THEN 'Lifecycle'
        ELSE 'Other'
      END ;;
  }


  dimension: lifecycle_status {
    label: "Case Stages"
    type: string
    sql: ${status_normalized} ;;
  }

  dimension: lifecycle_sort {
    hidden: no
    type: number
    sql:
    CASE
      WHEN ${lifecycle_status} = '0) Status Not Yet Set' THEN 0
      WHEN ${status_stage_order} IS NOT NULL THEN ${status_stage_order}
      ELSE 99
    END ;;
  }

  measure: cases_managed {
    label: "Cases Managed"
    type: count_distinct
    sql: ${id} ;;
  }


  dimension: account_brand {
    type: string
    sql: ${accounts_joint_model.brand} ;;
    label: "Account Brand"
    description: "Category of the case (DNALegal, DNAWorkplace, DNAFamily, etc.)"
  }




# (Optional) boolean to keep only lifecycle + SNYS in the bar
  dimension: is_lifecycle_or_snys {
    hidden: yes
    type: yesno
    sql:
    CASE
      WHEN ${lifecycle_status} IN (
        '0) Status Not Yet Set',
        '1) Booking Appointments',
        '2) Appointments Booked',
        '3) Awaiting Samples',
        '4) Testing Underway',
        '5) Testing Completed',
        '6) Completed'
      ) THEN TRUE ELSE FALSE
    END ;;
  }


  dimension: lifecycle_status_or_support_admin {
    label: "Cases Operations Status (Lifecycle vs Support/Admin)"
    type: string
    sql:
    CASE
      WHEN ${status_display} = 'Booking Appointments' THEN '1. Booking Appointments'
      WHEN ${status_display} = 'Appointments Booked' THEN '2. Appointments Booked'
      WHEN ${status_display} = 'Awaiting Samples' THEN '3. Awaiting Samples'
      WHEN ${status_display} = 'Testing Underway' THEN '4. Testing Underway'
      WHEN ${status_display} = 'Testing Completed' THEN '5. Testing Completed'
      WHEN ${status_display} = 'Completed' THEN '6. Completed'
      ELSE '7. Support & Admin Statuses'
    END ;;
  }

  dimension: 99_lifecycle_status_or_support_admin {
    label: "99_Cases Operations Status (Lifecycle vs Support/Admin)"
    type: string
    sql:
    CASE
      WHEN COALESCE(${status_display}, '') IN (
        'Booking Appointments',
        'Appointments Booked',
        'Awaiting Samples',
        'Testing Underway',
        'Testing Completed',
        'Completed'
      ) THEN COALESCE(${status_display}, '')
      ELSE 'Support & Admin Statuses'
    END ;;
  }


  dimension: debug_status_display {
    hidden: no
    label: "Debug: Status Display"
    type: string
    sql: ${status_display} ;;
  }


  #--------------------------------------------------------------#
  ### --- flag the id cases that have status not yet set --- ###
  #--------------------------------------------------------------#

  dimension: status_not_yet_set_flag {
    type: yesno
    label: "Status Not Yet Set"
    sql: ${lifecycle_status} = '0) Status Not Yet Set' ;;
    group_label: "Diagnostics – Status"
  }

  dimension: status_display_clean {
    label: "Support & Admin Status (Raw)"
    type: string
    sql: ${status_display} ;;
  }

  dimension: is_true_support_admin_status {
    label: "Is True Support/Admin Status"
    type: yesno
    description: "Flags only the true Support/Admin statuses: 2, 7, 8, 10, 11, 12, 14, 15, 18, 19."
    group_label: "Diagnostics – Status"

    sql:
    ${status_display} IN (
      '2) Not Proceeding',
      '7) On Hold',
      '8) Future Case',
      '10) Case Contact Closure',
      '11) Cancelled',
      '12) Closed',
      '14) Status Not Yet Set',
      '15) On Hold (Pending Payment)',
      '18) Active',
      '19) Submitted'
    ) ;;
  }

  dimension: support_admin_status_display {
    label: "Support/Admin Status – Display"
    type: string
    group_label: "Lifecycle & Support/Admin"
    sql:
    CASE
      WHEN ${is_true_support_admin_status} THEN ${status_display}
      ELSE NULL
    END ;;
  }



  # Only the Support/Admin statuses themselves (nice for axes and tables)
  dimension: support_admin_status_only {
    label: "Support/Admin Status (Only True S/A)"
    type: string
    group_label: "Lifecycle & Support/Admin"
    sql: CASE WHEN ${is_true_support_admin_status} THEN ${status_display} ELSE NULL END ;;
  }

# A clean bucket to group by (useful for stacked bars, pie, etc.)
  dimension: support_admin_bucket {
    label: "Bucket – True Support/Admin"
    type: string
    group_label: "Lifecycle & Support/Admin"
    sql: CASE WHEN ${is_true_support_admin_status} THEN 'True Support/Admin' ELSE NULL END ;;
  }

# Quick count can be droped into tiles
  measure: count_true_support_admin {
    label: "True Support/Admin – Count"
    type: count_distinct
    sql: ${id} ;;
    filters: [is_true_support_admin_status: "yes"]
  }

  dimension: is_support_admin_status {
    label: "Is Support/Admin Status"
    type: yesno
    sql:
    CASE
      WHEN ${status_display} NOT IN (
        '1) Booking Appointments',
        '2) Appointments Booked',
        '3) Awaiting Samples',
        '4) Testing Underway',
        '5) Testing Completed',
        '6) Completed'
      )
      THEN TRUE
      ELSE FALSE
    END ;;
  }

  dimension: id_if_snys_this_month {
    hidden: yes
    type: string
    sql:
          CASE
            WHEN ${lifecycle_status} = '0) Status Not Yet Set'
             AND EXTRACT(YEAR  FROM DATE(${start_raw})) = EXTRACT(YEAR  FROM CURRENT_DATE())
             AND EXTRACT(MONTH FROM DATE(${start_raw})) = EXTRACT(MONTH FROM CURRENT_DATE())
            THEN ${id}
            ELSE NULL
          END ;;
  }

  measure: case_ids_status_not_yet_set_this_month {
    label: "Case IDs – Status Not Yet Set (This Month)"
    type: string
    sql: STRING_AGG(DISTINCT ${id_if_snys_this_month}, ', ' IGNORE NULLS) ;;
    group_label: "Diagnostics – Status"
  }

  dimension: case_lifecycle_grouped_this_month {
    label: "Case Lifecycle Status – Grouped (This Month)"
    type: string
    sql:
    CASE
      WHEN EXTRACT(YEAR FROM DATE(${start_raw})) = EXTRACT(YEAR FROM CURRENT_DATE())
        AND EXTRACT(MONTH FROM DATE(${start_raw})) = EXTRACT(MONTH FROM CURRENT_DATE())
        THEN
          CASE
            WHEN ${status} = 'Case Completed' THEN 'Case Completed'
            ELSE 'Open Cases'
          END
      ELSE NULL
    END ;;
    group_label: "Diagnostics – Status"
  }

  dimension: in_last_month {
    hidden: no
    type: yesno
    sql:
    DATE(${start_raw}) >= DATE_TRUNC(DATE_SUB(CURRENT_DATE("Europe/London"), INTERVAL 1 MONTH), MONTH)
    AND DATE(${start_raw}) <  DATE_TRUNC(CURRENT_DATE("Europe/London"), MONTH) ;;
  }

  dimension: in_this_month {
    hidden: no
    type: yesno
    sql:
    DATE(${start_raw}) >= DATE_TRUNC(CURRENT_DATE("Europe/London"), MONTH)
    AND DATE(${start_raw}) < DATE_TRUNC(DATE_ADD(CURRENT_DATE("Europe/London"), INTERVAL 1 MONTH), MONTH) ;;
  }

  dimension: case_lifecycle_grouped_last_month {
    label: "Case Lifecycle Status – Grouped (Last Month)"
    type: string
    sql:
    CASE
      WHEN EXTRACT(YEAR FROM DATE(${start_raw})) = EXTRACT(YEAR FROM DATE(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)))
        AND EXTRACT(MONTH FROM DATE(${start_raw})) = EXTRACT(MONTH FROM DATE(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)))
        THEN
          CASE
            WHEN ${status} = 'Case Completed' THEN 'Case Completed'
            ELSE 'Open Cases'
          END
      ELSE NULL
    END ;;
    group_label: "Diagnostics – Status"
  }


  dimension: case_lifecycle_grouped_this_year {
    label: "Case Lifecycle Status – Grouped (This Year)"
    type: string
    sql:
    CASE
      WHEN EXTRACT(YEAR FROM DATE(${start_raw})) = EXTRACT(YEAR FROM CURRENT_DATE())
      THEN
        CASE
          WHEN ${status} = 'Case Completed' THEN 'Case Completed'
          ELSE 'Open Cases'
        END
      ELSE NULL
    END ;;
    group_label: "Diagnostics – Status"
  }

  measure: pct_status_not_yet_set_this_year {
    label: "% Status Not Yet Set (This Year)"
    type: number
    value_format_name: percent_1
    sql: SAFE_DIVIDE(
         SUM(CASE WHEN ${lifecycle_status} = '0) Status Not Yet Set'
                  AND EXTRACT(YEAR FROM ${start_raw}) = EXTRACT(YEAR FROM CURRENT_DATE())
                  THEN 1 ELSE 0 END),
         SUM(CASE WHEN EXTRACT(YEAR FROM ${start_raw}) = EXTRACT(YEAR FROM CURRENT_DATE())
                  THEN 1 ELSE 0 END)
       ) ;;
    group_label: "Diagnostics – Status"
  }


# --- Lifecycle end ---



  measure: count_booking_appointments {
    type: sum
    label: "Booking Appointments"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'Booking Appointments' THEN 1 ELSE 0 END ;;
  }

  measure: count_appointment_booked {
    type: sum
    label: "Appointment Booked"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'Appointment Booked' THEN 1 ELSE 0 END ;;
  }

  measure: count_awaiting_samples {
    type: sum
    label: "Awaiting Samples"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'Awaiting Samples' THEN 1 ELSE 0 END ;;
  }

  measure: count_testing_underway {
    type: sum
    label: "Testing Underway"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'Testing Underway' THEN 1 ELSE 0 END ;;
  }

  measure: count_testing_completed {
    type: sum
    label: "Testing Completed"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'Testing Completed' THEN 1 ELSE 0 END ;;
  }

  measure: count_case_completed {
    type: sum
    label: "Case Completed"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'Case Completed' THEN 1 ELSE 0 END ;;
  }

  measure: count_case_completed_last_30_days {
    type: sum
    label: "Case Completed (Last 30 Days)"
    value_format_name: decimal_0

    sql:
    CASE
      WHEN LOWER(${status_display}) IN ('completed', 'case completed')
       AND ${completed_raw} IS NOT NULL
       AND DATE(${completed_raw}) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
      THEN 1
      ELSE 0
    END ;;
  }

  measure: count_on_hold {
    type: sum
    label: "On Hold"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'On Hold' THEN 1 ELSE 0 END ;;
  }

  measure: count_not_proceeding {
    type: sum
    label: "Not Proceeding"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'Not Proceeding' THEN 1 ELSE 0 END ;;
  }

  measure: count_case_contact_closure {
    type: sum
    label: "Case Contact Closure"
    value_format_name: decimal_0
    sql: CASE WHEN ${status_display} = 'Case Contact Closure' THEN 1 ELSE 0 END ;;
  }




  measure: percent_case_completed_last_30_days_vs_year {
    label: "% Case Completed (Last 30 Days vs This Year)"
    type: number
    value_format_name: percent_1

    sql: SAFE_DIVIDE(
          SUM(
            CASE
              WHEN ${status} = 'Case Completed'
                AND EXTRACT(DATE FROM ${completed_raw}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) AND CURRENT_DATE()
              THEN 1
              ELSE 0
            END
          ),
          SUM(
            CASE
              WHEN ${status} = 'Case Completed'
                AND EXTRACT(YEAR FROM ${completed_raw}) = EXTRACT(YEAR FROM CURRENT_DATE())
              THEN 1
              ELSE 0
            END
          )
        ) ;;
  }
  measure: count_appointment_booked_last_30_days {
    type: sum
    label: "Appointments Booked (Last 30 Days)"
    value_format_name: decimal_0
    sql: CASE
          WHEN ${status} = 'Appointment Booked'
           AND ${created_raw} >= TIMESTAMP(DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))
          THEN 1 ELSE 0
        END ;;
  }

  measure: percent_appointment_booked_30_day_vs_total {
    type: number
    label: "% Appointments Booked (30 Days vs Total)"
    value_format_name: percent_1
    sql: SAFE_DIVIDE(
          ${count_appointment_booked_last_30_days},
          ${count_appointment_booked}
        ) ;;
  }


  measure: count_appointment_booked_this_year {
    type: sum
    label: "Appointments Booked (This Year)"
    value_format_name: decimal_0
    sql: CASE
          WHEN ${status} = 'Appointment Booked'
           AND EXTRACT(YEAR FROM ${created_raw}) = EXTRACT(YEAR FROM CURRENT_DATE())
          THEN 1 ELSE 0
        END ;;
  }


  measure: percent_appointment_booked_30_day_vs_year {
    type: number
    label: "% Appointments Booked (30 Days vs This Year)"
    value_format_name: percent_1
    sql: SAFE_DIVIDE(
          ${count_appointment_booked_last_30_days},
          ${count_appointment_booked_this_year}

      ) ;;
    drill_fields: [id, created_raw]
  }

  measure: count_appointment_booked_this_month {
    type: sum
    label: "Appointments Booked (This Month)"
    value_format_name: decimal_0
    sql: CASE
          WHEN ${status} = 'Appointment Booked'
           AND EXTRACT(YEAR FROM ${created_raw}) = EXTRACT(YEAR FROM CURRENT_DATE())
           AND EXTRACT(MONTH FROM ${created_raw}) = EXTRACT(MONTH FROM CURRENT_DATE())
          THEN 1 ELSE 0
        END ;;
  }

  measure: percent_appointment_booked_month_vs_year {
    type: number
    label: "% Appointments Booked (This Month vs This Year)"
    value_format_name: percent_1
    sql: SAFE_DIVIDE(
          ${count_appointment_booked_this_month},
          ${count_appointment_booked_this_year}
        ) ;;
  }


##### just for fun#######

  dimension_group: created_month {
    label: "Case Created Month"
    type: time
    timeframes: [month, year, date]
    datatype: date
    convert_tz: no
    sql: DATE_TRUNC(DATE(${created_raw}), MONTH) ;;
  }

  dimension_group: completed_month {
    label: "Case Completed Month"
    type: time
    timeframes: [month, year, date]
    datatype: date
    convert_tz: no
    sql: DATE_TRUNC(DATE(${completed_raw}), MONTH) ;;
  }

  measure: cases_created_count {
    label: "Cases Created"
    type: count_distinct
    sql: ${id} ;;
    filters: [created_date: "-NULL"]   # see created_date
  }

  measure: cases_completed_count {
    label: "Cases Completed"
    type: count_distinct
    sql: ${id} ;;
    filters: [completed_date: "-NULL"] # see completed_date
  }

  measure: cases_created_may_2025 {
    label: "Cases Created (May 2025)"
    type: count_distinct
    sql: ${id} ;;
    filters: [created_date: "2025-05-01 to 2025-05-31"] #
  }

  measure: cases_completed_may_2025 {
    label: "Cases Completed (May 2025)"
    type: count_distinct
    sql: ${id} ;;
    filters: [completed_date: "2025-05-01 to 2025-05-31"] #
  }

  #  Reusable boolean for "open" operational statuses
  dimension: is_open_now {
    label: "Is Open Now (Operational Status)"
    type: yesno
    sql:
    CASE
      WHEN ${status_display} IN (
        'Booking Appointments',
        'Appointment Booked',       -- include both spellings
        'Appointments Booked',
        'Awaiting Samples',
        'Testing Underway',
        'Testing Completed',
        'Future Case',
        'Awaiting Setup'
      ) THEN TRUE
      ELSE FALSE
    END ;;
  }

#  (THIS YEAR, de-duplicated)
  measure: count_cases_open_now_this_year {
    label: "Cases Open Now (This Year)"
    group_label: "Measures – Case Status"
    type: count_distinct
    sql: ${id} ;;
    filters: [is_open_now: "yes", start_date: "this year"]
    value_format_name: decimal_0
    description: "Distinct cases with an open operational status, restricted to cases that started this calendar year."
  }



  measure: count_booking_appointments_this_year {
    label: "Booking Appointments (This Year)"
    group_label: "Measures – Case Status (This Year)"
    type: count_distinct
    sql: ${id} ;;
    filters: [status_display: "Booking Appointments", start_date: "this year"]
  }

  measure: count_appointments_booked_this_year {
    label: "Appointments Booked (This Year)"
    group_label: "Measures – Case Status (This Year)"
    type: count_distinct
    sql: ${id} ;;
    filters: [status_display: "Appointment Booked, Appointments Booked", start_date: "this year"]
  }

  measure: count_awaiting_samples_this_year {
    label: "Awaiting Samples (This Year)"
    group_label: "Measures – Case Status (This Year)"
    type: count_distinct
    sql: ${id} ;;
    filters: [status_display: "Awaiting Samples", start_date: "this year"]
  }

  measure: count_testing_underway_this_year {
    label: "Testing Underway (This Year)"
    group_label: "Measures – Case Status (This Year)"
    type: count_distinct
    sql: ${id} ;;
    filters: [status_display: "Testing Underway", start_date: "this year"]
  }

  measure: count_testing_completed_this_year {
    label: "Testing Completed (This Year)"
    group_label: "Measures – Case Status (This Year)"
    type: count_distinct
    sql: ${id} ;;
    filters: [status_display: "Testing Completed", start_date: "this year"]
  }

  measure: count_future_case_this_year {
    label: "Future Case (This Year)"
    group_label: "Measures – Case Status (This Year)"
    type: count_distinct
    sql: ${id} ;;
    filters: [status_display: "Future Case", start_date: "this year"]
  }

  measure: count_awaiting_setup_this_year {
    label: "Awaiting Setup (This Year)"
    group_label: "Measures – Case Status (This Year)"
    type: count_distinct
    sql: ${id} ;;
    filters: [status_display: "Awaiting Setup", start_date: "this year"]
  }


  measure: case_ids_open_now_this_year_strict {
    label: "Case IDs – Open Now (This Year – Strict)"
    group_label: "Diagnostics – Status"
    type: string
    sql:
    COALESCE(
      STRING_AGG(
        DISTINCT CAST(
          CASE
            WHEN ${status_normalized} != 'Completed'
             AND COALESCE(${is_support_admin_status}, FALSE) = FALSE
             AND EXTRACT(YEAR FROM DATE(${start_date})) = EXTRACT(YEAR FROM CURRENT_DATE())
            THEN ${id}
            ELSE NULL
          END AS STRING
        ),
        ', '
      ),
      '–'
    ) ;;
  }

}
